// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleCMS.Data;

#nullable disable

namespace SimpleCMS.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240324215815_SeedSubMenuItems")]
    partial class SeedSubMenuItems
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArticlesFiles", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.HasKey("ArticleId", "FileId");

                    b.HasIndex("FileId");

                    b.ToTable("ArticlesFiles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c22aa1d5-6185-414f-be86-36e5c9aac53b",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "011a47d1-fae5-4ee4-a04b-d6bf6703aa88",
                            RoleId = "c22aa1d5-6185-414f-be86-36e5c9aac53b"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("SimpleCMS.Data.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Articles", (string)null);
                });

            modelBuilder.Entity("SimpleCMS.Data.Models.Files", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Files", (string)null);
                });

            modelBuilder.Entity("SimpleCMS.Data.Models.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("MenuItems", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Link = "test",
                            Published = true,
                            Title = "Училище"
                        },
                        new
                        {
                            Id = 2,
                            Link = "test",
                            Published = true,
                            Title = "Начало"
                        },
                        new
                        {
                            Id = 3,
                            Link = "test",
                            Published = true,
                            Title = "Прием"
                        },
                        new
                        {
                            Id = 4,
                            Link = "test",
                            Published = true,
                            Title = "За Родителя"
                        },
                        new
                        {
                            Id = 5,
                            Link = "test",
                            Published = true,
                            Title = "За Ученика"
                        },
                        new
                        {
                            Id = 6,
                            Link = "test",
                            Published = true,
                            Title = "Контакти"
                        },
                        new
                        {
                            Id = 7,
                            Link = "test",
                            Published = true,
                            Title = "Галерия"
                        },
                        new
                        {
                            Id = 8,
                            Link = "test",
                            Published = true,
                            Title = "Профил на купувача"
                        },
                        new
                        {
                            Id = 9,
                            Link = "test",
                            ParentId = 1,
                            Published = true,
                            Title = "Административни услуги"
                        },
                        new
                        {
                            Id = 10,
                            Link = "test",
                            ParentId = 1,
                            Published = true,
                            Title = "Учителски състав"
                        },
                        new
                        {
                            Id = 11,
                            Link = "test",
                            ParentId = 1,
                            Published = true,
                            Title = "История"
                        },
                        new
                        {
                            Id = 12,
                            Link = "test",
                            ParentId = 1,
                            Published = true,
                            Title = "Новини"
                        },
                        new
                        {
                            Id = 13,
                            Link = "test",
                            ParentId = 1,
                            Published = true,
                            Title = "Партньори и проекти"
                        },
                        new
                        {
                            Id = 14,
                            Link = "test",
                            ParentId = 3,
                            Published = true,
                            Title = "Брошура"
                        },
                        new
                        {
                            Id = 15,
                            Link = "test",
                            ParentId = 3,
                            Published = true,
                            Title = "Специалности"
                        },
                        new
                        {
                            Id = 16,
                            Link = "test",
                            ParentId = 15,
                            Published = true,
                            Title = "Приложно програмиране"
                        },
                        new
                        {
                            Id = 17,
                            Link = "test",
                            ParentId = 15,
                            Published = true,
                            Title = "КТТ"
                        },
                        new
                        {
                            Id = 18,
                            Link = "test",
                            ParentId = 15,
                            Published = true,
                            Title = "Електроенергетика"
                        },
                        new
                        {
                            Id = 19,
                            Link = "test",
                            ParentId = 15,
                            Published = true,
                            Title = "Електрообзавеждане"
                        },
                        new
                        {
                            Id = 20,
                            Link = "test",
                            ParentId = 15,
                            Published = true,
                            Title = "Роботика"
                        },
                        new
                        {
                            Id = 21,
                            Link = "test",
                            ParentId = 4,
                            Published = true,
                            Title = "Стипендии"
                        },
                        new
                        {
                            Id = 22,
                            Link = "test",
                            ParentId = 4,
                            Published = true,
                            Title = "Ел. Дневник"
                        },
                        new
                        {
                            Id = 23,
                            Link = "test",
                            ParentId = 5,
                            Published = true,
                            Title = "Изпити"
                        },
                        new
                        {
                            Id = 24,
                            Link = "test",
                            ParentId = 5,
                            Published = true,
                            Title = "Учебници"
                        },
                        new
                        {
                            Id = 25,
                            Link = "test",
                            ParentId = 5,
                            Published = true,
                            Title = "Седмично разписание"
                        },
                        new
                        {
                            Id = 26,
                            Link = "test",
                            ParentId = 23,
                            Published = true,
                            Title = "ДЗИ"
                        },
                        new
                        {
                            Id = 27,
                            Link = "test",
                            ParentId = 23,
                            Published = true,
                            Title = "Поправителни изпити"
                        },
                        new
                        {
                            Id = 28,
                            Link = "test",
                            ParentId = 23,
                            Published = true,
                            Title = "Самостоятелна форма"
                        });
                });

            modelBuilder.Entity("SimpleCMS.Data.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("Settings", (string)null);
                });

            modelBuilder.Entity("SimpleCMS.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "652ac0fa-4ec4-437d-89be-b49493d87217",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f24aa94a-fd74-4828-88ef-18554ff1f52c",
                            Email = "admin@simplecms.net",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "John Smith",
                            NormalizedEmail = "ADMIN@SIMPLECMS.NET",
                            NormalizedUserName = "ADMIN@SIMPLECMS.NET",
                            PasswordHash = "AQAAAAIAAYagAAAAELDvxpW084RrBdBl+e9/35ID1Kh1/0qO8RxBegGzZSV6Kka0USyNuI1g5/R1219u5Q==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c8aa1998-e893-454e-bbe1-5a8a2dc0b523",
                            TwoFactorEnabled = false,
                            UserName = "admin@simplecms.net"
                        });
                });

            modelBuilder.Entity("ArticlesFiles", b =>
                {
                    b.HasOne("SimpleCMS.Data.Models.Article", null)
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_ArticlesFiles_Articles_ArticleId");

                    b.HasOne("SimpleCMS.Data.Models.Files", null)
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ArticlesFiles_Files_FileId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SimpleCMS.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SimpleCMS.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleCMS.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SimpleCMS.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleCMS.Data.Models.MenuItem", b =>
                {
                    b.HasOne("SimpleCMS.Data.Models.MenuItem", "Parent")
                        .WithMany("SubMenuItems")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("SimpleCMS.Data.Models.MenuItem", b =>
                {
                    b.Navigation("SubMenuItems");
                });
#pragma warning restore 612, 618
        }
    }
}
